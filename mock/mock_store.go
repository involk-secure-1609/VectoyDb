// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\User\Desktop\VectoyDb\store\store.go (interfaces: Store)
//
// Generated by this command:
//
//	mockgen C:\Users\User\Desktop\VectoyDb\store\store.go Store
//

// Package mock_store is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStore) Delete(storeName string, embedding []float32, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", storeName, embedding, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(storeName, embedding, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), storeName, embedding, key)
}

// Insert mocks base method.
func (m *MockStore) Insert(storeName string, embedding []float32, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", storeName, embedding, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStoreMockRecorder) Insert(storeName, embedding, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStore)(nil).Insert), storeName, embedding, key)
}

// Load mocks base method.
func (m *MockStore) Load(storeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", storeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockStoreMockRecorder) Load(storeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStore)(nil).Load), storeName)
}

// Lookup mocks base method.
func (m *MockStore) Lookup(storeName string, embedding []float32, key string) ([]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", storeName, embedding, key)
	ret0, _ := ret[0].([]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockStoreMockRecorder) Lookup(storeName, embedding, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockStore)(nil).Lookup), storeName, embedding, key)
}

// Save mocks base method.
func (m *MockStore) Save(storeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", storeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStoreMockRecorder) Save(storeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStore)(nil).Save), storeName)
}

// Search mocks base method.
func (m *MockStore) Search(storeName string, query []float32, limit int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", storeName, query, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockStoreMockRecorder) Search(storeName, query, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockStore)(nil).Search), storeName, query, limit)
}
